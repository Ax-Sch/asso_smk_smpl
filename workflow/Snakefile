configfile: "config/config.yaml"

containerized: "docker://axschmidt/gwas_pipeline:0.1"

rule all:
	input:
		expand("results/regenie_association_merged/{phenotypes}.regenie.gz", phenotypes=config["phenotype"]["phenotype_columns"] ),
		expand("results/regenie_association_merged_QC/{phenotypes}_LOG10P_manhattan.png", phenotypes=config["phenotype"]["phenotype_columns"] ),


##### >>> file preparation #####

rule prune_common:
	input:
		fam=config["genotype"]["covar_plink_pref"] + ".fam",
		bim=config["genotype"]["covar_plink_pref"] + ".bim",
		bed=config["genotype"]["covar_plink_pref"] + ".bed",
	output:
		pruned_variant_set="results/prune_common/prune_common.prune.in",
	resources: cpus=1, mem_mb=18000, time_job=720, partition=config["medium_part"],
	params:		
		out_prefix=lambda wildcards, output: output["pruned_variant_set"][:-9],
	conda: "envs/plink.yaml"
	shell:
		"""
		plink \
		--bed {input.bed} \
		--bim {input.bim} \
		--fam {input.fam} \
		--chr 1-22 \
		--indep-pairwise 1000 50 0.2 \
		--keep-allele-order \
		--maf 0.01 \
		--out "{params.out_prefix}"
		"""


rule PCA_for_cov:
	input:
		fam=config["genotype"]["covar_plink_pref"] + ".fam",
		bim=config["genotype"]["covar_plink_pref"] + ".bim",
		bed=config["genotype"]["covar_plink_pref"] + ".bed",
		pruned_variant_set="results/prune_common/prune_common.prune.in",
	output:
		eigenv="results/covar_PCA/common_vars.eigenvec"
	resources: cpus=1, mem_mb=18000, time_job=720, partition=config["medium_part"],
	params:		
		out_prefix=lambda wildcards, output: output["eigenv"][:-9],
		covariates_nPC=config["phenotype"]["covariates_nPC"],
	conda: "envs/plink.yaml"
	shell:
		"""
		plink \
		--bed {input.bed} \
		--bim {input.bim} \
		--fam {input.fam} \
		--extract {input.pruned_variant_set} \
		--pca {params.covariates_nPC} \
		--out "{params.out_prefix}"
		"""


rule make_regenie_pheno:
	input:
		sample_sheet_file=config["phenotype"]["sample_sheet"],
	output:
		pheno_file="results/pheno_cov/pheno.pheno",
	params: 
		pheno_columns=config["phenotype"]["phenotype_columns"],
	conda: "envs/R_tidyverse.yaml"
	resources: cpus=1, mem_mb=5000, time_job=720, partition=config["medium_part"],
	script: "scripts/make_pheno.R"


rule make_regenie_cov:
	input:
		sample_sheet_file=config["phenotype"]["sample_sheet"],
		cov_pcs_file="results/covar_PCA/common_vars.eigenvec",
	output:
		cov_file="results/pheno_cov/cov.cov",
	params: 
		cov_columns=config["phenotype"]["covariate_columns"],
		covariates_nPC=config["phenotype"]["covariates_nPC"],
	conda: "envs/R_tidyverse.yaml"
	resources: cpus=1, mem_mb=5000, time_job=720, partition=config["medium_part"],
	script: "scripts/make_cov.R"



# generates the import command for plink2:
def generate_plink2_import_command(input):
	# copy variables to variables with shorter names:
	asso_filetype=config["genotype"]["asso_filetype"]
	asso_imputed=config["genotype"]["asso_imputed"]
	dosage_field=config["genotype"]["dosage_field"]
	asso_variants=input["asso_variants"]
	#construct import command for plink2
	plink2_import_command=""
	if asso_filetype=="vcf":
		plink2_import_command="--double-id --vcf " + asso_variants
		if asso_imputed==True:
			plink2_import_command=plink2_import_command + " dosage=" + dosage_field
	elif asso_filetype=="plink1":
		plink2_import_command="--bfile " + asso_variants[:-4]
	print("plink2 import parameters: " + plink2_import_command)
	return(plink2_import_command)


# convert variants to plink2 format, as this works well with regenie
rule convert_asso_variants:
	input:
		asso_variants=config["genotype"]["asso_prefix"] + "{contig}" + config["genotype"]["asso_postfix"],
	output:
		pgen="results/asso_variants/chr{contig}.pgen",
		psam="results/asso_variants/chr{contig}.psam",
		pvar="results/asso_variants/chr{contig}.pvar",
	params:
		plink_out=lambda wildcards, output: output["pgen"][:-5],
		import_command=lambda wildcards, input: generate_plink2_import_command(input)
	conda: "envs/plink2.yaml"
	shell:
		"""
		plink2 \
		{params.import_command} \
		--make-pgen \
		--threads 7 \
		--out {params.plink_out}
		"""

##### <<< file preparation #####





##### >>> association analysis #####

rule regenie_association:
	input:
		cov="results/pheno_cov/cov.cov",
		pheno="results/pheno_cov/pheno.pheno",
		step2_gen_file="results/asso_variants/chr{contig}.pgen",
	output:
		step2_NQ2=expand("results/regenie_association/{contig}_{phenotypes}.regenie.gz", 
			phenotypes=config["phenotype"]["phenotype_columns"],
			allow_missing=True)
	params:
		out_prefix="results/regenie_association/{contig}",
		pgen=lambda wildcards, input: input["step2_gen_file"][:-5],
	conda: "envs/regenie.yaml"
	shell:
		"""
		regenie \
		--step 2 \
		--pgen {params.pgen} \
		--phenoFile {input.pheno} \
		--covarFile {input.cov} \
		--bt \
		--write-samples \
		--gz \
		--ignore-pred \
		--bsize 1000 \
		--minMAC 10 \
		--out {params.out_prefix}
		"""
		
		
rule merge_regenie_results:
	input:
		expand("results/regenie_association/{contig}_{phenotypes}.regenie.gz", contig=config["genotype"]["asso_contigs"], allow_missing=True), 
	output:
		merged_assoc="results/regenie_association_merged/{phenotypes}.regenie.gz",
	params:
		header="results/regenie_association_merged/header_{phenotypes}.txt"
	conda: "envs/tabix.yaml"
	shell:
		"""
		if zcat {input} | head -n1 > {params.header}
		then
		echo "error"
		fi
		
		zcat {input} | grep -v "CHROM" | \
		cat {params.header} - | \
		bgzip > {output}
		"""

##### <<< association analysis #####





##### >>> QC of association results #####

rule generate_qq_plots:
	input:
		merged_assoc="results/regenie_association_merged/{phenotypes}.regenie.gz",
	output:
		out="results/regenie_association_merged_QC/{phenotypes}_LOG10P_manhattan.png"
	resources: cpus=1, mem_mb=30000, time_job=720
	params:
		output_prefix=lambda wildcards, output: output["out"][:-21],
		bp_col="GENPOS",
		chr_col="CHROM",
		pcols="LOG10P",
	conda: "envs/R_qqplot.yaml"
	script: "scripts/qqplot.R"
##### <<< QC of association results #####
